name: CI
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-test:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Quick format & SPDX header check (fail-fast)
        run: |
          bash scripts/format_check.sh || (echo "Formatting check failed early" && exit 1)
          bash scripts/spdx_check.sh
      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-linux-amd64-${{ hashFiles('**/CMakeLists.txt', 'proto/**/*.proto') }}
          restore-keys: |
            ccache-linux-amd64-
      - name: Install deps
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler libprotobuf-dev cmake g++ ninja-build ccache
      - name: Configure ccache env
        run: |
          if command -v ccache >/dev/null 2>&1; then
            echo "CMAKE_CXX_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV
            echo "CMAKE_C_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV
            ccache --version || true
          fi
      - name: Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DT2D_BUILD_TESTS=ON -DT2D_BUILD_CLIENT=ON -DCMAKE_CXX_FLAGS_RELEASE="-O2 -g0" -DCMAKE_C_FLAGS_RELEASE="-O2 -g0"
      - name: Build
        env:
          CMAKE_BUILD_PARALLEL_LEVEL: 4
        run: |
          echo "Limiting parallel build to ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }} jobs to reduce memory usage"
          cmake --build build --parallel ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }}
      - name: Run tests
        working-directory: build
        run: ctest --output-on-failure -T Test
      - name: Format check (post-build)
        run: bash scripts/format_check.sh || (echo "Run formatting target locally" && exit 1)
      - name: SPDX header check (post-build)
        run: bash scripts/spdx_check.sh
      - name: Upload server binary
        uses: actions/upload-artifact@v4
        with:
          name: t2d_server-linux-amd64
          path: build/t2d_server*
          if-no-files-found: warn
      - name: Upload desktop client prototype
        uses: actions/upload-artifact@v4
        with:
          name: t2d_desktop_client-linux-amd64
          path: build/t2d_desktop_client*
          if-no-files-found: warn
      - name: Upload Qt client (if built)
        uses: actions/upload-artifact@v4
        with:
          name: t2d_qt_client-linux-amd64
          path: build/t2d_qt_client*
          if-no-files-found: ignore
      - name: Package server
        run: |
          bash scripts/package_server.sh
          ls -l dist
      - name: Upload server package
        uses: actions/upload-artifact@v4
        with:
          name: t2d_server_package-linux-amd64
          path: dist/t2d_server.tar.gz*
          if-no-files-found: warn
      - name: Build Docker image
        run: |
          docker build -t t2d/server:ci .
          docker image ls t2d/server:ci

  coverage:
    name: Coverage (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Install deps
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler libprotobuf-dev cmake g++ lcov ninja-build
      - name: Configure (Debug + coverage)
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DT2D_BUILD_TESTS=ON -DT2D_ENABLE_COVERAGE=ON -DT2D_BUILD_CLIENT=ON -G Ninja
      - name: Build
        run: cmake --build build -- -j4
      - name: Run tests (generate coverage)
        working-directory: build
        run: ctest --output-on-failure
      - name: Capture lcov
        run: |
          lcov --capture --directory build --output-file coverage.info
          lcov --remove coverage.info '/usr/*' 'third_party/*' --output-file coverage.info || true
          lcov --list coverage.info
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: coverage.info
      - name: Coverage summary
        run: |
          lines=$(grep -E 'end_of_record' -c coverage.info || true)
          echo "Total records: $lines" >> $GITHUB_STEP_SUMMARY
          pct_line=$(grep -E 'lines.*:' coverage.info | head -n1 | awk -F'=' '{print $2}') || true
          echo "Line coverage: ${pct_line:-n/a}" >> $GITHUB_STEP_SUMMARY

  verify-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Verify dependency manifest
        run: |
          set -e
          declare -A SUBS
          while read -r sha path rest; do
            clean_sha=${sha#-}; clean_sha=${clean_sha#+}; clean_sha=${clean_sha%%-*}
            SUBS["$path"]=$clean_sha
          done < <(git submodule status)
          missing=0
          while IFS= read -r line; do
            [[ $line == '|'*'|'* ]] || continue
            if echo "$line" | grep -qi '| *Name *|'; then continue; fi
            if echo "$line" | grep -Eq '^\|[- ]+\|'; then continue; fi
            IFS='|' read -r _ name path ref sha rest <<<"$line" || true
            name=$(echo "$name" | xargs); path=$(echo "$path" | xargs); sha=$(echo "$sha" | xargs)
            [[ -z $name || -z $path || -z $sha ]] && continue
            want=${sha,,}
            have=${SUBS[$path]:-}
            if [[ -z $have ]]; then
              echo "Mismatch: $name $path missing in submodule status" >&2
              missing=1; continue
            fi
            if [[ $have != $want ]]; then
              echo "Mismatch: $name $path sha expected $want got $have" >&2
              missing=1
            fi
          done < DEPENDENCIES.md
          if [[ $missing -ne 0 ]]; then exit 1; fi
          echo "Dependency manifest OK"

  clang-tidy:
    name: Clang-Tidy (Gating)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Install deps (compiler + protobuf + clang-tidy)
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler libprotobuf-dev cmake g++ ninja-build clang-tidy
      - name: Configure (Debug, export compile commands)
        run: cmake -S . -B build-tidy -DCMAKE_BUILD_TYPE=Debug -DT2D_BUILD_TESTS=ON -G Ninja
      - name: Build (compile only, no tests)
        run: cmake --build build-tidy -- -j4
      - name: Run clang-tidy script
        run: bash scripts/clang_tidy.sh || true
      - name: Summarize diagnostics
        run: |
          if grep -R "warning:" -n build-tidy 2>/dev/null | head -n1; then
            wc=$(grep -R "warning:" -n build-tidy | wc -l || true)
            echo "Clang-Tidy warnings: $wc" >> $GITHUB_STEP_SUMMARY
          else
            echo "Clang-Tidy warnings: 0" >> $GITHUB_STEP_SUMMARY
          fi

  android-toolchain:
    name: Android Toolchain Verify
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
      - name: Install required SDK components
        run: |
          sdkmanager --install \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "ndk;29.0.13846066"
      - name: Export env versions
        run: |
          echo "ANDROID_NDK_VERSION=29.0.13846066" >> $GITHUB_ENV
          echo "ANDROID_BUILD_TOOLS_VERSION=34.0.0" >> $GITHUB_ENV
      - name: Verify toolchain
        run: bash scripts/check_android_toolchain.sh
      - name: Summary
        run: echo "Android toolchain verified" >> $GITHUB_STEP_SUMMARY

  android-build:
    name: Android APK Build
    runs-on: ubuntu-latest
    needs: android-toolchain
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install protoc
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
      - name: Install SDK components
        run: |
          sdkmanager --install \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "ndk;29.0.13846066"
      - name: Generate protobuf (lite)
        run: bash scripts/gen_proto_android.sh
      - name: Grant execute
        run: chmod +x android/gradlew || true
      - name: Build APK
        working-directory: android
        run: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          ./gradlew assembleDebug --no-daemon --stacktrace
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-debug
          path: android/app/build/outputs/apk/debug/*.apk
          if-no-files-found: error
